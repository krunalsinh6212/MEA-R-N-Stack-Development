{"ast":null,"code":"import { catchError, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst baseUrl = 'http://localhost:8080/api/products';\nexport class ProductService {\n  constructor(http) {\n    this.http = http;\n  }\n  getAll() {\n    console.log('Fetching all products from:', baseUrl);\n    return this.http.get(baseUrl).pipe(tap(data => console.log('Products received:', data)), catchError(error => {\n      console.error('Error fetching products:', error);\n      throw error;\n    }));\n  }\n  get(id) {\n    console.log(`Fetching product with id ${id} from: ${baseUrl}/${id}`);\n    return this.http.get(`${baseUrl}/${id}`).pipe(tap(data => console.log('Product received:', data)), catchError(error => {\n      console.error('Error fetching product:', error);\n      throw error;\n    }));\n  }\n  create(data) {\n    console.log('Creating product with data:', data);\n    return this.http.post(baseUrl, data).pipe(tap(response => console.log('Create response:', response)), catchError(error => {\n      console.error('Error creating product:', error);\n      throw error;\n    }));\n  }\n  update(id, data) {\n    console.log(`Updating product ${id} with data:`, data);\n    return this.http.put(`${baseUrl}/${id}`, data).pipe(tap(response => console.log('Update response:', response)), catchError(error => {\n      console.error('Error updating product:', error);\n      throw error;\n    }));\n  }\n  delete(id) {\n    if (!id) {\n      throw new Error('Product ID is required for deletion');\n    }\n    console.log(`Deleting product with id: ${id}`);\n    return this.http.delete(`${baseUrl}/${id}`).pipe(tap(response => console.log('Delete response:', response)), catchError(error => {\n      console.error('Error deleting product:', error);\n      throw error;\n    }));\n  }\n  deleteAll() {\n    console.log('Deleting all products');\n    return this.http.delete(baseUrl).pipe(tap(response => console.log('Delete all response:', response)), catchError(error => {\n      console.error('Error deleting all products:', error);\n      throw error;\n    }));\n  }\n  findByTitle(title) {\n    console.log(`Searching for products with title: ${title}`);\n    return this.http.get(`${baseUrl}?title=${title}`).pipe(tap(data => console.log('Search results:', data)), catchError(error => {\n      console.error('Error searching products:', error);\n      throw error;\n    }));\n  }\n}\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["catchError","tap","baseUrl","ProductService","constructor","http","getAll","console","log","get","pipe","data","error","id","create","post","response","update","put","delete","Error","deleteAll","findByTitle","title","factory","providedIn"],"sourceRoot":"","sources":["D:\\MEAN-stack\\Angular_crud\\frontend\\src\\app\\services\\product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Product } from '../models/product.model';\nimport { Observable, catchError, tap } from 'rxjs';\n\nconst baseUrl = 'http://localhost:8080/api/products';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  constructor(private http: HttpClient) { }\n\n  getAll(): Observable<Product[]> {\n    console.log('Fetching all products from:', baseUrl);\n    return this.http.get<Product[]>(baseUrl)\n      .pipe(\n        tap(data => console.log('Products received:', data)),\n        catchError(error => {\n          console.error('Error fetching products:', error);\n          throw error;\n        })\n      );\n  }\n\n  get(id: any): Observable<Product> {\n    console.log(`Fetching product with id ${id} from: ${baseUrl}/${id}`);\n    return this.http.get<Product>(`${baseUrl}/${id}`)\n      .pipe(\n        tap(data => console.log('Product received:', data)),\n        catchError(error => {\n          console.error('Error fetching product:', error);\n          throw error;\n        })\n      );\n  }\n\n  create(data: any): Observable<any> {\n    console.log('Creating product with data:', data);\n    return this.http.post(baseUrl, data)\n      .pipe(\n        tap(response => console.log('Create response:', response)),\n        catchError(error => {\n          console.error('Error creating product:', error);\n          throw error;\n        })\n      );\n  }\n\n  update(id: any, data: any): Observable<any> {\n    console.log(`Updating product ${id} with data:`, data);\n    return this.http.put(`${baseUrl}/${id}`, data)\n      .pipe(\n        tap(response => console.log('Update response:', response)),\n        catchError(error => {\n          console.error('Error updating product:', error);\n          throw error;\n        })\n      );\n  }\n\n  delete(id: any): Observable<any> {\n    if (!id) {\n      throw new Error('Product ID is required for deletion');\n    }\n    console.log(`Deleting product with id: ${id}`);\n    return this.http.delete(`${baseUrl}/${id}`)\n      .pipe(\n        tap(response => console.log('Delete response:', response)),\n        catchError(error => {\n          console.error('Error deleting product:', error);\n          throw error;\n        })\n      );\n  }\n\n  deleteAll(): Observable<any> {\n    console.log('Deleting all products');\n    return this.http.delete(baseUrl)\n      .pipe(\n        tap(response => console.log('Delete all response:', response)),\n        catchError(error => {\n          console.error('Error deleting all products:', error);\n          throw error;\n        })\n      );\n  }\n\n  findByTitle(title: any): Observable<Product[]> {\n    console.log(`Searching for products with title: ${title}`);\n    return this.http.get<Product[]>(`${baseUrl}?title=${title}`)\n      .pipe(\n        tap(data => console.log('Search results:', data)),\n        catchError(error => {\n          console.error('Error searching products:', error);\n          throw error;\n        })\n      );\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}